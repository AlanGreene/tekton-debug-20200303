---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pipelinerun-20200303-pvc
spec:
  resources:
    requests:
      storage:  5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: check-change-request-approval
spec:
  inputs:
    params:
      - name: pipeline-pvc
        description: the output pvc - this is where the cloned repository will be stored
  steps:

    - name: check-approval
      image: ibmcom/pipeline-base-image
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          echo "Change Request \$CHANGE_REQUEST_ID is APPROVED"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.pipeline-pvc)
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: close-change-request
spec:
  inputs:
    params:
      - name: pipeline-pvc
        description: the output pvc - this is where the cloned repository will be stored
  steps:
    - name: close-cr
      image: ibmcom/pipeline-base-image
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          set -x
          echo "Change Request \$CHANGE_REQUEST_ID closed"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.pipeline-pvc)
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: create-change-request
spec:
  inputs:
    params:
      - name: pipeline-pvc
        description: the output pvc - this is where the cloned repository will be stored
  steps:
    - name: setup-scripts
      image: ibmcom/pipeline-base-image
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          echo "setup-scripts"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
    - name: create-cr
      image: ibmcom/pipeline-base-image
      env:
        - name: HOME
          value: "/root"
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          set -x
          echo "Change request ID: \$CHANGE_REQUEST_ID"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.pipeline-pvc)
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: git-clone
  documentation: https://github.ibm.com/one-pipeline/common-tekton-tasks/git/README.md
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc to store cloned repo
  steps:
    - name: clone-repo
      image: ibmcom/pipeline-base-image
      workingDir: "/artifacts"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e
          echo "git clone of \${REPOSITORY} (branch \${BRANCH} Commit \${GIT_COMMIT}) done to directory \${DIRECTORY_NAME}"
          ls
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: get-git-credentials
  documentation: https://github.ibm.com/one-pipeline/common-tekton-tasks/git/README.md
spec:
  inputs:
    params:
      - name: credentials-pvc
        description: the output pvc to store credentials
  steps:
    - name: fetch-git-token
      image: ibmcom/pipeline-base-image
      env:
        - name: HOME
          value: "/root"
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          echo "\"GIT_TOKEN\":\"\${GIT_TOKEN}\"}"
      volumeMounts:
        - mountPath: /secrets
          name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.credentials-pvc)
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: run-deployment-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc - this is where the cloned repository will be stored
  steps:
    - name: deploy
      image: ibmcom/pipeline-base-image
      env:
        - name: HOME
          value: "/root"
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          echo "deploy"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
---
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  params:
    - name: pipeline-pvc
      description: pipeline pvc name place holder
  tasks:
    - name: get-git-credentials
      taskRef:
        name: get-git-credentials
      params:
        - name: credentials-pvc
          value: $(params.pipeline-pvc)
    - name: pipeline-clone-repo
      taskRef:
        name: git-clone
      runAfter:
        - get-git-credentials
      params:
        - name: task-pvc
          value: $(params.pipeline-pvc)
    - name: pipeline-create-cr
      taskRef:
        name: create-change-request
      runAfter:
        - get-git-credentials
      params:
        - name: pipeline-pvc
          value: $(params.pipeline-pvc)
    - name: pipeline-check-cr-approval
      taskRef:
        name: check-change-request-approval
      runAfter:
        - pipeline-create-cr
      params:
        - name: pipeline-pvc
          value: $(params.pipeline-pvc)
    - name: pipeline-deployment
      taskRef:
        name: run-deployment-task
      runAfter:
        - pipeline-clone-repo
        - pipeline-check-cr-approval
      params:
        - name: task-pvc
          value: $(params.pipeline-pvc)
    - name: pipeline-close-cr
      taskRef:
        name: close-change-request
      runAfter:
        - pipeline-deployment
      params:
        - name: pipeline-pvc
          value: $(params.pipeline-pvc)
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineRun
metadata:
  name: pipelinerun-20200303
spec:
  pipelineRef:
    name: cd-pipeline
  params:
    - name: pipeline-pvc
      value: pipelinerun-20200303-pvc
